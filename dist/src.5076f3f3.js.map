{"version":3,"sources":["Interface/Map.js","Game/Room.js","Interface/Text.js","Game/Player.js","Game/World.js","Game/utils.js","Game/Action.js","Interface/Action.js","index.js"],"names":["canvasId","scaling","playerSize","mapCanvas","document","getElementById","mapContext","getContext","drawRoom","room","fillStyle","color","fillRect","xPos","yPos","width","height","drawPlayer","player","playerXPos","currentRoom","playerYPos","beginPath","arc","Math","PI","fill","erasePlayer","strokeStyle","stroke","drawMap","world","rooms","forEach","randomValue","floor","random","randomColor","Room","name","validator","roomConnections","push","textId","textElement","say","textContent","innerHTML","Player","wantedRoom","roomConnection","find","connection","undefined","message","validatorError","World","roomConfiguration","length","Error","randomId","window","crypto","getRandomValues","Uint32Array","toString","Action","actionText","actionCallback","identifier","actionId","actionsElement","addAction","actionElement","createElement","Object","assign","classList","onclick","id","append","removeAction","parentNode","removeChild","clearActions","main","room1","createRoom","room2","room3","createPlayer","addConnection","moveToRoom1","move","moveToRoom2","searchTheRoom","moveToRoom3","setTimeout","updateColor"],"mappings":"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","file":"src.5076f3f3.js","sourceRoot":"../src","sourcesContent":["const canvasId = 'map'\nconst scaling = 150\nconst playerSize = 1 / 10\n\nconst mapCanvas = document.getElementById(canvasId)\nconst mapContext = mapCanvas.getContext('2d')\n/**\n * @param {Room} room - The room to draw\n */\nexport const drawRoom = (room) => {\n  mapContext.fillStyle = room.color\n  mapContext.fillRect(\n    room.xPos * scaling,\n    room.yPos * scaling,\n    room.width * scaling,\n    room.height * scaling\n  )\n}\n\n/**\n * @param {Player} player - The player to draw\n */\nexport const drawPlayer = (player) => {\n  mapContext.fillStyle = 'rgb(255, 165, 0)'\n  const playerXPos =\n    (player.currentRoom.xPos + player.currentRoom.width / 2) * scaling\n  const playerYPos =\n    (player.currentRoom.yPos + player.currentRoom.height / 2) * scaling\n  mapContext.beginPath()\n  mapContext.arc(\n    playerXPos,\n    playerYPos,\n    playerSize * scaling,\n    0,\n    Math.PI * 2,\n    true\n  )\n  mapContext.fill()\n}\n\n/**\n * @param {Player} player - The player to erase\n */\nexport const erasePlayer = (player) => {\n  mapContext.fillStyle = player.currentRoom.color\n  mapContext.strokeStyle = player.currentRoom.color\n  const playerXPos =\n    (player.currentRoom.xPos + player.currentRoom.width / 2) * scaling\n  const playerYPos =\n    (player.currentRoom.yPos + player.currentRoom.height / 2) * scaling\n  mapContext.beginPath()\n  mapContext.arc(\n    playerXPos,\n    playerYPos,\n    playerSize * scaling,\n    0,\n    Math.PI * 2,\n    true\n  )\n  mapContext.fill()\n  mapContext.stroke()\n}\n\n/**\n * Draw a given world.\n * @param {World} world - The world to draw.\n */\nexport const drawMap = (world) => {\n  world.rooms.forEach(drawRoom)\n  drawPlayer(world.player)\n}\n","const randomValue = () => Math.floor(Math.random() * 255)\nconst randomColor = () =>\n  `rgb(${randomValue()}, ${randomValue()}, ${randomValue()})`\nimport { drawRoom } from '../Interface/Map'\n\nexport class Room {\n  /**\n   * @type {{room: Room, validator: () => string}[]}\n   */\n  roomConnections = []\n\n  /**\n   * @param {Object} roomConfiguration - this is the room configuration\n   * @param {string} roomConfiguration.name - the name of the room\n   * @param {number} roomConfiguration.height - room height\n   * @param {number} roomConfiguration.width - room width\n   * @param {number} roomConfiguration.xPos - room horizontal emplacement\n   * @param {number} roomConfiguration.yPos - room vertical emplacement\n   * @param {string} roomConfiguration.color - the room color\n   */\n  constructor({ name, height = 1, width = 1, xPos = 0, yPos = 0, color }) {\n    this.name = name\n    this.height = height\n    this.width = width\n    this.xPos = xPos\n    this.yPos = yPos\n    this.color = color ? color : randomColor()\n  }\n\n  /**\n   * @param {string} color - The new color\n   */\n  updateColor(color) {\n    this.color = color ? color : randomColor()\n    drawRoom(this)\n  }\n\n  /**\n   * @param {Room} room - The room to link to the current room\n   * @param {() => string} validator - the validation function to authorize usage of the connection\n   */\n  addConnection(room, validator) {\n    this.roomConnections.push({\n      room,\n      validator,\n    })\n  }\n}\n","const textId = 'text'\nconst textElement = document.getElementById(textId)\n\n/**\n * Text to say\n * @param {string} textContent\n */\nexport const say = (textContent) => {\n  textElement.innerHTML = textContent\n}\n","import { Room } from './Room'\nimport { drawPlayer, erasePlayer } from '../Interface/Map'\nimport { say } from '../Interface/Text'\n\n/**\n *\n */\nexport class Player {\n  /**\n   * Create a player\n   * @param {Room} room the initial room where the player is\n   * @param {string} name the player name\n   */\n  constructor(room, name) {\n    this.currentRoom = room\n    this.name = name\n  }\n\n  /**\n   * Move to another room\n   * @param {Room} wantedRoom\n   */\n  move(wantedRoom) {\n    const roomConnection = this.currentRoom.roomConnections.find(\n      (connection) => connection.room === wantedRoom\n    )\n    if (roomConnection === undefined) {\n      throw 'The room you want is not in the good range'\n    }\n\n    try {\n      const message = roomConnection.validator()\n      erasePlayer(this)\n      this.currentRoom = roomConnection.room\n      drawPlayer(this)\n      say(message)\n      return message\n    } catch (validatorError) {\n      say(validatorError.message)\n      return validatorError\n    }\n  }\n}\n","import { Player } from './Player'\nimport { Room } from './Room'\nimport { drawRoom, drawPlayer } from '../Interface/Map'\n\nexport class World {\n  /**\n   * @type {Room[]}\n   */\n  rooms = []\n\n  /**\n   * @type {Player | undefined}\n   */\n  player = undefined\n\n  constructor(name) {\n    this.name = name\n  }\n\n  /**\n   * @param {Object} roomConfiguration - this is the room configuration\n   */\n  createRoom(roomConfiguration) {\n    const room = new Room(roomConfiguration)\n    this.rooms.push(room)\n    drawRoom(room)\n    return room\n  }\n\n  /**\n   * Add a connection between room1 and room2\n   * @param {string} name the player name\n   * @returns {Player} the created player\n   */\n  createPlayer(name) {\n    if (this.rooms.length === 0) {\n      throw new Error(\n        'The world needs to have at least one room for the player to start'\n      )\n    }\n    const player = new Player(this.rooms[0], name)\n    this.player = player\n    drawPlayer(player)\n    return player\n  }\n}\n","/**\n * return a random string id\n * @return {string}\n */\nexport const randomId = () =>\n  window.crypto.getRandomValues(new Uint32Array(1))[0].toString(16)\n","import { randomId } from './utils'\n\nexport class Action {\n  /**\n   * Create an action\n   * @param {string} actionText the action text\n   * @param {()=>void} actionCallback to do on action click\n   */\n  constructor(actionText, actionCallback) {\n    this.actionText = actionText\n    this.actionCallback = actionCallback\n    this.identifier = randomId()\n  }\n}\n","const actionId = 'actions'\nconst actionsElement = document.getElementById(actionId)\nimport { Action } from '../Game/Action'\n\n/**\n * Actions to add\n * @param {Action} action action to register\n */\nexport const addAction = ({ actionText, actionCallback, identifier }) => {\n  const actionElement = document.createElement('button')\n  Object.assign(actionElement, {\n    classList: ['action-button'],\n    onclick: actionCallback,\n    id: identifier,\n    innerHTML: actionText,\n  })\n  actionsElement.append(actionElement)\n}\n/**\n * Actions to remove\n * @param {Action} action action to register\n */\nexport const removeAction = ({ identifier }) => {\n  const actionElement = document.getElementById(identifier)\n  if (actionElement) actionElement.parentNode.removeChild(actionElement)\n}\n/**\n * Clear all actions to remove\n */\nexport const clearActions = () => {\n  actionsElement.innerHTML = ''\n}\n","import { World } from './Game/World'\nimport { Action } from './Game/Action'\nimport { say } from './Interface/Text'\nimport { addAction, clearActions } from './Interface/Action'\n\nconst main = () => {\n  const world = new World('World')\n\n  const room1 = world.createRoom({ name: 'room1', height: 2 })\n  const room2 = world.createRoom({ name: 'room2', xPos: 1 })\n  const room3 = world.createRoom({\n    name: 'room3',\n    xPos: 1,\n    yPos: 1,\n    color: 'black',\n  })\n  const player = world.createPlayer('John Doe')\n\n  room1.addConnection(room2, () => {\n    return `${player.name} moved to room 2 from room 1`\n  })\n\n  room2.addConnection(room1, () => {\n    return `${player.name} moved to room 1 from room 2`\n  })\n\n  room2.addConnection(room3, () => {\n    return `${player.name} moved to room 3 from room 2`\n  })\n\n  const moveToRoom1 = new Action('Move to room 1', () => {\n    player.move(room1)\n    clearActions()\n    addAction(moveToRoom2)\n  })\n\n  const moveToRoom2 = new Action('Move to room 2', () => {\n    player.move(room2)\n    clearActions()\n    addAction(moveToRoom1)\n    if (room3.color === 'black') addAction(searchTheRoom)\n    else addAction(moveToRoom3)\n  })\n\n  const moveToRoom3 = new Action('Move to room 3', () => {\n    player.move(room3)\n    clearActions()\n    setTimeout(() => {\n      say(`${player.name} found the exit 🎉`)\n    }, 1200)\n  })\n\n  const searchTheRoom = new Action('Search the room with care', () => {\n    say(`${player.name} searches the room ...`)\n    clearActions()\n    setTimeout(() => {\n      say(`${player.name} found a little trap door to another room`)\n      addAction(moveToRoom1)\n      addAction(moveToRoom3)\n      room3.updateColor()\n    }, 1200)\n  })\n\n  setTimeout(() => {\n    say(`${player.name} wakes up.`)\n    addAction(moveToRoom2)\n  }, 1200)\n}\n\nvoid main()\n"]}