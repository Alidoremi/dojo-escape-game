{"version":3,"sources":["Game/Room.js","Interface/Map.js","Game/Player.js","Game/World.js","Interface/Text.js","index.js"],"names":["randomValue","Math","floor","random","randomColor","Room","name","height","width","xPos","yPos","color","room","validator","roomConnections","push","canvasId","scaling","playerSize","mapCanvas","document","getElementById","mapContext","getContext","drawRoom","fillStyle","fillRect","drawPlayer","player","playerXPos","currentRoom","playerYPos","beginPath","arc","PI","fill","erasePlayer","strokeStyle","stroke","drawMap","world","rooms","forEach","Player","wantedRoom","roomConnection","find","connection","undefined","message","error","World","roomConfiguration","length","Error","textId","textElement","say","textContent","innerHTML","main","room1","createRoom","room2","createPlayer","addConnection","setTimeout","setInterval","move"],"mappings":"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","file":"src.5da793c1.js","sourceRoot":"../src","sourcesContent":["const randomValue = () => Math.floor(Math.random() * 255)\nconst randomColor = () =>\n  `rgb(${randomValue()}, ${randomValue()}, ${randomValue()})`\n\nexport class Room {\n  /**\n   * @type {{room: Room, validator: () => string}[]}\n   */\n  roomConnections = []\n\n  /**\n   * @param {Object} roomConfiguration - this is the room configuration\n   * @param {string} roomConfiguration.name - the name of the room\n   * @param {number} roomConfiguration.height - room height\n   * @param {number} roomConfiguration.width - room width\n   * @param {number} roomConfiguration.xPos - room horizontal emplacement\n   * @param {number} roomConfiguration.yPos - room vertical emplacement\n   */\n  constructor({ name, height = 1, width = 1, xPos = 0, yPos = 0 }) {\n    this.name = name\n    this.height = height\n    this.width = width\n    this.xPos = xPos\n    this.yPos = yPos\n    this.color = randomColor()\n  }\n\n  /**\n   * @param {Room} room - The room to link to the current room\n   * @param {() => string} validator - the validation function to authorize usage of the connection\n   */\n  addConnection(room, validator) {\n    this.roomConnections.push({\n      room,\n      validator,\n    })\n  }\n}\n","const canvasId = 'map'\nconst scaling = 150\nconst playerSize = 1 / 10\n\nconst mapCanvas = document.getElementById(canvasId)\nconst mapContext = mapCanvas.getContext('2d')\n/**\n * @param {Room} room - The room to draw\n */\nexport const drawRoom = (room) => {\n  mapContext.fillStyle = room.color\n  mapContext.fillRect(\n    room.xPos * scaling,\n    room.yPos * scaling,\n    room.width * scaling,\n    room.height * scaling\n  )\n}\n\n/**\n * @param {Player} player - The player to draw\n */\nexport const drawPlayer = (player) => {\n  mapContext.fillStyle = 'rgb(255, 165, 0)'\n  const playerXPos =\n    (player.currentRoom.xPos + player.currentRoom.width / 2) * scaling\n  const playerYPos =\n    (player.currentRoom.yPos + player.currentRoom.height / 2) * scaling\n  mapContext.beginPath()\n  mapContext.arc(\n    playerXPos,\n    playerYPos,\n    playerSize * scaling,\n    0,\n    Math.PI * 2,\n    true\n  )\n  mapContext.fill()\n}\n\n/**\n * @param {Player} player - The player to erase\n */\nexport const erasePlayer = (player) => {\n  mapContext.fillStyle = player.currentRoom.color\n  mapContext.strokeStyle = player.currentRoom.color\n  const playerXPos =\n    (player.currentRoom.xPos + player.currentRoom.width / 2) * scaling\n  const playerYPos =\n    (player.currentRoom.yPos + player.currentRoom.height / 2) * scaling\n  mapContext.beginPath()\n  mapContext.arc(\n    playerXPos,\n    playerYPos,\n    playerSize * scaling,\n    0,\n    Math.PI * 2,\n    true\n  )\n  mapContext.fill()\n  mapContext.stroke()\n}\n\n/**\n * Draw a given world.\n * @param {World} world - The world to draw.\n */\nexport const drawMap = (world) => {\n  world.rooms.forEach(drawRoom)\n  drawPlayer(world.player)\n}\n","import { Room } from './Room'\nimport { drawPlayer, erasePlayer } from '../Interface/Map'\n\n/**\n *\n */\nexport class Player {\n  /**\n   * Create a player\n   * @param {Room} room the initial room where the player is\n   * @param {string} name the player name\n   */\n  constructor(room, name) {\n    this.currentRoom = room\n    this.name = name\n  }\n\n  /**\n   * Move to another room\n   * @param {Room} wantedRoom\n   */\n  move(wantedRoom) {\n    const roomConnection = this.currentRoom.roomConnections.find(\n      (connection) => connection.room === wantedRoom\n    )\n    if (roomConnection === undefined) {\n      throw 'The room you want is not in the good range'\n    }\n\n    try {\n      const message = roomConnection.validator()\n      erasePlayer(this)\n      this.currentRoom = roomConnection.room\n      drawPlayer(this)\n      return message\n    } catch (error) {\n      return error\n    }\n  }\n}\n","import { Player } from './Player'\nimport { Room } from './Room'\nimport { drawRoom, drawPlayer } from '../Interface/Map'\n\nexport class World {\n  /**\n   * @type {Room[]}\n   */\n  rooms = []\n\n  /**\n   * @type {Player | undefined}\n   */\n  player = undefined\n\n  constructor(name) {\n    this.name = name\n  }\n\n  /**\n   * @param {Object} roomConfiguration - this is the room configuration\n   */\n  createRoom(roomConfiguration) {\n    const room = new Room(roomConfiguration)\n    this.rooms.push(room)\n    drawRoom(room)\n    return room\n  }\n\n  /**\n   * Add a connection between room1 and room2\n   * @param {string} name the player name\n   * @returns {Player} the created player\n   */\n  createPlayer(name) {\n    if (this.rooms.length === 0) {\n      throw new Error(\n        'The world needs to have at least one room for the player to start'\n      )\n    }\n    const player = new Player(this.rooms[0], name)\n    this.player = player\n    drawPlayer(player)\n    return player\n  }\n}\n","const textId = 'text'\nconst textElement = document.getElementById(textId)\n\n/**\n * Text to say\n * @param {string} textContent\n */\nexport const say = (textContent) => {\n  textElement.innerHTML = textContent\n}\n","import { World } from './Game/World'\nimport { say } from './Interface/Text'\nfunction main() {\n  const world = new World('World')\n\n  const room1 = world.createRoom({ name: 'room1', height: 2 })\n  const room2 = world.createRoom({ name: 'room2', xPos: 1, height: 2 })\n\n  const player = world.createPlayer('John Doe')\n\n  room1.addConnection(room2, () => {\n    return `${player.name} moved to room 2 from room 1`\n  })\n\n  room2.addConnection(room1, () => {\n    return `${player.name} moved to room 1 from room 2`\n  })\n\n  setTimeout(() => {\n    say(`Hi ${player.name}`)\n    setInterval(() => {\n      say(player.move(player.currentRoom === room1 ? room2 : room1))\n    }, 1500)\n  }, 500)\n}\n\nvoid main()\n"]}