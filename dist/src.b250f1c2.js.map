{"version":3,"sources":["Interface/Map.js","Game/Room.js","Interface/Text.js","Game/Player.js","Game/utils.js","Game/Action.js","Interface/Action.js","Game/World.js","index.js"],"names":["canvasId","scaling","playerSize","mapCanvas","document","getElementById","mapContext","getContext","drawRoom","room","fillStyle","color","fillRect","xPos","yPos","width","height","drawPlayer","player","playerXPos","currentRoom","playerYPos","beginPath","arc","Math","PI","fill","erasePlayer","strokeStyle","stroke","drawMap","world","rooms","forEach","randomValue","floor","random","randomColor","Room","name","textId","textElement","say","textContent","innerHTML","Player","wantedRoom","randomId","window","crypto","getRandomValues","Uint32Array","toString","Action","text","callback","isEnabled","identifier","MoveAction","actionConfig","move","actionId","actionsElement","addAction","actionElement","createElement","Object","assign","classList","onclick","id","append","addEnabledActions","actions","action","removeAction","parentNode","removeChild","clearActions","World","undefined","Promise","resolve","then","catch","console","error","roomConfiguration","push","wrapCallback","length","Error","main","room1","createRoom","room2","room3","createPlayer","createMoveAction","setTimeout","createAction","updateColor"],"mappings":";AAoEO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,QAAA,YAAA,QAAA,WAAA,QAAA,cAAA,EApEP,IAAMA,EAAW,MACXC,EAAU,IACVC,EAAa,GAEbC,EAAYC,SAASC,eAAeL,GACpCM,EAAaH,EAAUI,WAAW,MAK3BC,EAAW,SAACC,GACvBH,EAAWI,UAAYD,EAAKE,MAC5BL,EAAWM,SACTH,EAAKI,KAAOZ,EACZQ,EAAKK,KAAOb,EACZQ,EAAKM,MAAQd,EACbQ,EAAKO,OAASf,IAoDX,QAAA,SAAA,EA7CA,IAAMgB,EAAa,SAACC,GACzBZ,EAAWI,UAAY,mBACjBS,IAAAA,GACHD,EAAOE,YAAYP,KAAOK,EAAOE,YAAYL,MAAQ,GAAKd,EACvDoB,GACHH,EAAOE,YAAYN,KAAOI,EAAOE,YAAYJ,OAAS,GAAKf,EAC9DK,EAAWgB,YACXhB,EAAWiB,IACTJ,EACAE,EACAnB,EAAaD,EACb,EACU,EAAVuB,KAAKC,IACL,GAEFnB,EAAWoB,QA8BN,QAAA,WAAA,EAxBA,IAAMC,EAAc,SAACT,GAC1BZ,EAAWI,UAAYQ,EAAOE,YAAYT,MAC1CL,EAAWsB,YAAcV,EAAOE,YAAYT,MACtCQ,IAAAA,GACHD,EAAOE,YAAYP,KAAOK,EAAOE,YAAYL,MAAQ,GAAKd,EACvDoB,GACHH,EAAOE,YAAYN,KAAOI,EAAOE,YAAYJ,OAAS,GAAKf,EAC9DK,EAAWgB,YACXhB,EAAWiB,IACTJ,EACAE,EACAnB,EAAaD,EACb,EACU,EAAVuB,KAAKC,IACL,GAEFnB,EAAWoB,OACXpB,EAAWuB,UAON,QAAA,YAAA,EAAA,IAAMC,EAAU,SAACC,GACtBA,EAAMC,MAAMC,QAAQzB,GACpBS,EAAWc,EAAMb,SAFZ,QAAA,QAAA;;ACtCJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EA3BH,IAAA,EAAA,QAAA,oBA2BG,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA9BH,IAAMgB,EAAc,WAAMV,OAAAA,KAAKW,MAAsB,IAAhBX,KAAKY,WACpCC,EAAc,WACXH,MAAAA,OAAAA,OAAAA,IAAkBA,MAAAA,OAAAA,IAAkBA,MAAAA,OAAAA,IADzB,MAIPI,EAAAA,WAU6D,SAAA,EAAA,GAA1DC,IAAAA,EAAAA,EAAAA,KAAMvB,EAAAA,EAAAA,OAAAA,OAAS,IAAA,EAAA,EAA2C,EAAxCD,EAAAA,EAAAA,MAAAA,OAAQ,IAAA,EAAA,EAAgC,EAA7BF,EAAAA,EAAAA,KAAAA,OAAO,IAAA,EAAA,EAAsB,EAAnBC,EAAAA,EAAAA,KAAAA,OAAO,IAAA,EAAA,EAAY,EAATH,EAAAA,EAAAA,MAAS,EAAA,KAAA,GACjE4B,KAAAA,KAAOA,EACPvB,KAAAA,OAASA,EACTD,KAAAA,MAAQA,EACRF,KAAAA,KAAOA,EACPC,KAAAA,KAAOA,EACPH,KAAAA,MAAQA,GAAgB0B,IAS9B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cAHW1B,MAAAA,SAAAA,GACLA,KAAAA,MAAQA,GAAgB0B,KACpB,EAAA,EAAA,UAAA,UACV,EAzBUC,GAyBV,QAAA,KAAA;;ACvBI,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAPP,IAAME,EAAS,OACTC,EAAcrC,SAASC,eAAemC,GAM/BE,EAAM,SAACC,GAClBF,EAAYG,UAAYD,GADnB,QAAA,IAAA;;ACmBJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EA1BH,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,oBACA,EAAA,QAAA,qBAwBG,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAnBUE,IAAAA,EAAAA,WAMCpC,SAAAA,EAAAA,EAAM8B,GAAM,EAAA,KAAA,GACjBnB,KAAAA,YAAcX,EACd8B,KAAAA,KAAOA,EAWb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAJIO,MAAAA,SAAAA,IACS,EAAA,EAAA,aAAA,MACP1B,KAAAA,YAAc0B,GACR,EAAA,EAAA,YAAA,UACZ,EAnBUD,GAmBV,QAAA,OAAA;;ACtBI,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAAA,IAAME,EAAW,WACtBC,OAAAA,OAAOC,OAAOC,gBAAgB,IAAIC,YAAY,IAAI,GAAGC,SAAS,KADzD,QAAA,SAAA;;ACiByBC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,WAAAA,QAAAA,YAAAA,EArBhC,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,UACA,EAAA,QAAA,WACA,EAAA,QAAA,qBAkBgCA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,EAAAA,OAAAA,KAAAA,GAAAA,GAAAA,OAAAA,sBAAAA,CAAAA,IAAAA,EAAAA,OAAAA,sBAAAA,GAAAA,IAAAA,EAAAA,EAAAA,OAAAA,SAAAA,GAAAA,OAAAA,OAAAA,yBAAAA,EAAAA,GAAAA,cAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,UAAAA,GAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,GAAAA,QAAAA,SAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,OAAAA,0BAAAA,OAAAA,iBAAAA,EAAAA,OAAAA,0BAAAA,IAAAA,EAAAA,OAAAA,IAAAA,QAAAA,SAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,OAAAA,yBAAAA,EAAAA,MAAAA,OAAAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,KAAAA,EAAAA,OAAAA,eAAAA,EAAAA,EAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,IAAAA,OAAAA,WAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,MAAAA,YAAAA,EAAAA,QAAAA,UAAAA,EAAAA,UAAAA,QAAAA,EAAAA,EAAAA,MAAAA,KAAAA,WAAAA,OAAAA,EAAAA,KAAAA,IAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,IAAAA,GAAAA,oBAAAA,UAAAA,QAAAA,UAAAA,OAAAA,EAAAA,GAAAA,QAAAA,UAAAA,KAAAA,OAAAA,EAAAA,GAAAA,mBAAAA,MAAAA,OAAAA,EAAAA,IAAAA,OAAAA,KAAAA,UAAAA,SAAAA,KAAAA,QAAAA,UAAAA,KAAAA,GAAAA,gBAAAA,EAAAA,MAAAA,GAAAA,OAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAhBnBA,IAAAA,EAQX,SAAyD,EAAA,GAA3CC,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,UAAAA,OAAY,IAAA,EAAA,WAAM,OAAA,GAAS,EAAA,EAAA,KAAA,GAClDF,KAAAA,KAAOA,EACPC,KAAAA,SAAWA,EACXC,KAAAA,UAAYA,EACZC,KAAAA,YAAa,EAAlB,EAAA,aAI4BJ,QAAAA,OAAAA,EAAnBK,IAAAA,EAAAA,SAAAA,GAAmBL,EAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,GAOlBM,SAAAA,EAAAA,EAAczC,EAAQ4B,GAE3Ba,OAFuC,EAAA,KAAA,GAEvCA,EAAAA,KAAAA,KAAAA,EAAAA,EAAAA,GAAAA,GAFuC,GAAA,CAG1CJ,SAAU,WAGDI,OAFPzC,EAAO0C,KAAKd,IACL5B,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAOqB,KAAiBO,cAAAA,OAAAA,EAAWP,OACnCoB,EAAaJ,eAbIF,OAAAA,EAAnBK,GAAmBL,QAAAA,WAAAA;;ACkBzB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,QAAA,aAAA,QAAA,kBAAA,QAAA,eAAA,EArCP,IAAA,EAAA,QAAA,kBACA,EAAA,QAAA,iBAHMQ,EAAW,UACXC,EAAiB1D,SAASC,eAAewD,GAQlCE,EAAY,SAAoC,GAAjCT,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,SAAUE,EAAAA,EAAAA,WACpCO,EAAgB5D,SAAS6D,cAAc,UAC7CC,OAAOC,OAAOH,EAAe,CAC3BI,UAAW,CAAC,iBACZC,QAASd,EACTe,GAAIb,EACJb,UAAWU,IAEbQ,EAAeS,OAAOP,IAsBjB,QAAA,UAAA,EAfA,IAAMQ,EAAoB,SAACzC,GAChCA,OAAAA,EAAM0C,QAAQxC,QAAQ,SAACyC,GAAWA,OAAAA,EAAOlB,aAAeO,EAAUW,MAc7D,QAAA,kBAAA,EARA,IAAMC,EAAe,SAAoB,GAAjBlB,IAAAA,EAAAA,EAAAA,WACvBO,EAAgB5D,SAASC,eAAeoD,GAC1CO,GAAeA,EAAcY,WAAWC,YAAYb,IAMnD,QAAA,aAAA,EAAA,IAAMc,EAAe,WAC1BhB,EAAelB,UAAY,IADtB,QAAA,aAAA;;AC0EJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAjHH,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,UACA,EAAA,QAAA,oBACA,EAAA,QAAA,YACA,EAAA,QAAA,uBA6GG,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA3GUmC,IAAAA,EAAAA,WAgBCxC,SAAAA,EAAAA,GAAM,EAAA,KAAA,GAZV,EAAA,KAAA,QAAA,IAKE,EAAA,KAAA,UAAA,IAKDyC,EAAAA,KAAAA,cAAAA,GAGFzC,KAAAA,KAAOA,EA0Fb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,eAnFYgB,MAAAA,SAAAA,GAAU,IAAA,EAAA,KACd,OAAA,WAEE,OADP,EAAA,EAAA,iBACQA,EAAWA,IAAa0B,QAAQC,QAAQ,OAC7CC,KAAK,YACc,EAAA,EAAA,mBAAA,KAEnBC,MAAMC,QAAQC,UA4EpB,CAAA,IAAA,aArEUC,MAAAA,SAAAA,GACH9E,IAAAA,EAAO,IAAI6B,EAAJ,KAASiD,GAGf9E,OAFFuB,KAAAA,MAAMwD,KAAK/E,IACPA,EAAAA,EAAAA,UAAAA,GACFA,IAiER,CAAA,IAAA,eAvDYkD,MAAAA,SAAAA,GACLe,IAAAA,EAAS,IAAIrB,EAAJ,OACVM,EAAAA,EAAAA,GAAAA,GADU,GAAA,CAEb5B,MAAO,KACPwB,SAAU,KAAKkC,aAAa9B,EAAaJ,aAGpCmB,OADFX,KAAAA,UAAUW,GACRA,IAgDR,CAAA,IAAA,mBArCgBf,MAAAA,SAAAA,EAAcb,GACvB4B,IAAAA,EAAS,IAAIhB,EAAJ,WAERC,EAAAA,EAAAA,GAAAA,GAFQ,GAAA,CAGX5B,MAAO,KACPwB,SAAU,KAAKkC,aAAa9B,EAAaJ,YAE3C,KAAKrC,OACL4B,GAGK4B,OADFX,KAAAA,UAAUW,GACRA,IA0BR,CAAA,IAAA,YAnBSA,MAAAA,SAAAA,GACHD,KAAAA,QAAQe,KAAKd,KAkBnB,CAAA,IAAA,eAVYnC,MAAAA,SAAAA,GACP,GAAsB,IAAtB,KAAKP,MAAM0D,OACP,MAAA,IAAIC,MACR,qEAGEzE,IAAAA,EAAS,IAAI2B,EAAJ,OAAW,KAAKb,MAAM,GAAIO,GAGlCrB,OAFFA,KAAAA,OAASA,GACHA,EAAAA,EAAAA,YAAAA,GACJA,MACR,EA3GU6D,GA2GV,QAAA,MAAA;;AC3CH,aAtEA,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,oBACA,EAAA,QAAA,sBAEMa,EAAO,WACL7D,IAAAA,EAAQ,IAAIgD,EAAJ,MAAU,SAElBc,EAAQ9D,EAAM+D,WAAW,CAAEvD,KAAM,SAAUvB,OAAQ,IACnD+E,EAAQhE,EAAM+D,WAAW,CAAEvD,KAAM,SAAU1B,KAAM,IACjDmF,EAAQjE,EAAM+D,WAAW,CAC7BvD,KAAM,SACN1B,KAAM,EACNC,KAAM,EACNH,MAAO,UAGHO,EAASa,EAAMkE,aAAa,YAElClE,EAAMmE,iBACJ,CACE5C,KAAM,iBACNE,UAAW,WAAMtC,OAAAA,EAAOE,cAAgB2E,IAE1CF,GAGF9D,EAAMmE,iBACJ,CACE5C,KAAM,iBACNC,SAAU,WACR,OAAA,IAAI0B,QAAQ,SAACC,GACXiB,WAAW,YACFjF,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAOqB,KAAd,wBACC,MACH2C,OAEJ1B,UAAW,WAAMtC,OAAAA,EAAOE,cAAgB2E,GAAyB,UAAhBC,EAAMrF,QAEzDqF,GAGFjE,EAAMqE,aAAa,CACjB9C,KAAM,4BACNC,SAAU,WACR,OAAA,IAAI0B,QAAQ,SAACC,IACJhE,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAOqB,KAAd,2BACA4D,WAAW,YACFjF,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAOqB,KAAd,8CACAyD,EAAMK,cACNnB,KACC,QAEP1B,UAAW,WAAMtC,OAAAA,EAAOE,cAAgB2E,GAAyB,UAAhBC,EAAMrF,SAGzDwF,WAAW,YACFjF,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAOqB,KAAd,gBAEER,EAAAA,EAAAA,WAAAA,EAAMmE,iBACJ,CACE5C,KAAM,iBACNE,UAAW,WAAMtC,OAAAA,EAAOE,cAAgByE,GACxC9D,MAAAA,GAEFgE,KAGH,OAGAH","file":"src.b250f1c2.js","sourceRoot":"../src","sourcesContent":["const canvasId = 'map'\nconst scaling = 150\nconst playerSize = 1 / 10\n\nconst mapCanvas = document.getElementById(canvasId)\nconst mapContext = mapCanvas.getContext('2d')\n\n/**\n * @param {Room} room - The room to draw\n */\nexport const drawRoom = (room) => {\n  mapContext.fillStyle = room.color\n  mapContext.fillRect(\n    room.xPos * scaling,\n    room.yPos * scaling,\n    room.width * scaling,\n    room.height * scaling\n  )\n}\n\n/**\n * @param {Player} player - The player to draw\n */\nexport const drawPlayer = (player) => {\n  mapContext.fillStyle = 'rgb(255, 165, 0)'\n  const playerXPos =\n    (player.currentRoom.xPos + player.currentRoom.width / 2) * scaling\n  const playerYPos =\n    (player.currentRoom.yPos + player.currentRoom.height / 2) * scaling\n  mapContext.beginPath()\n  mapContext.arc(\n    playerXPos,\n    playerYPos,\n    playerSize * scaling,\n    0,\n    Math.PI * 2,\n    true\n  )\n  mapContext.fill()\n}\n\n/**\n * @param {Player} player - The player to erase\n */\nexport const erasePlayer = (player) => {\n  mapContext.fillStyle = player.currentRoom.color\n  mapContext.strokeStyle = player.currentRoom.color\n  const playerXPos =\n    (player.currentRoom.xPos + player.currentRoom.width / 2) * scaling\n  const playerYPos =\n    (player.currentRoom.yPos + player.currentRoom.height / 2) * scaling\n  mapContext.beginPath()\n  mapContext.arc(\n    playerXPos,\n    playerYPos,\n    playerSize * scaling,\n    0,\n    Math.PI * 2,\n    true\n  )\n  mapContext.fill()\n  mapContext.stroke()\n}\n\n/**\n * Draw a given world.\n * @param {World} world - The world to draw.\n */\nexport const drawMap = (world) => {\n  world.rooms.forEach(drawRoom)\n  drawPlayer(world.player)\n}\n","const randomValue = () => Math.floor(Math.random() * 255)\nconst randomColor = () =>\n  `rgb(${randomValue()}, ${randomValue()}, ${randomValue()})`\nimport { drawRoom } from '../Interface/Map'\n\nexport class Room {\n  /**\n   * @param {Object} roomConfiguration - this is the room configuration\n   * @param {string} roomConfiguration.name - the name of the room\n   * @param {number} roomConfiguration.height - room height\n   * @param {number} roomConfiguration.width - room width\n   * @param {number} roomConfiguration.xPos - room horizontal emplacement\n   * @param {number} roomConfiguration.yPos - room vertical emplacement\n   * @param {string} roomConfiguration.color - the room color\n   */\n  constructor({ name, height = 1, width = 1, xPos = 0, yPos = 0, color }) {\n    this.name = name\n    this.height = height\n    this.width = width\n    this.xPos = xPos\n    this.yPos = yPos\n    this.color = color ? color : randomColor()\n  }\n\n  /**\n   * @param {string} color - The new color\n   */\n  updateColor(color) {\n    this.color = color ? color : randomColor()\n    drawRoom(this)\n  }\n}\n","const textId = 'text'\nconst textElement = document.getElementById(textId)\n\n/**\n * Text to say\n * @param {string} textContent\n */\nexport const say = (textContent) => {\n  textElement.innerHTML = textContent\n}\n","import { Room } from './Room'\nimport { drawPlayer, erasePlayer } from '../Interface/Map'\nimport { say } from '../Interface/Text'\n\n/**\n *\n */\nexport class Player {\n  /**\n   * Create a player\n   * @param {Room} room the initial room where the player is\n   * @param {string} name the player name\n   */\n  constructor(room, name) {\n    this.currentRoom = room\n    this.name = name\n  }\n\n  /**\n   * Move to another room\n   * @param {Room} wantedRoom\n   */\n  move(wantedRoom) {\n    erasePlayer(this)\n    this.currentRoom = wantedRoom\n    drawPlayer(this)\n  }\n}\n","/**\n * return a random string id\n * @return {string}\n */\nexport const randomId = () =>\n  window.crypto.getRandomValues(new Uint32Array(1))[0].toString(16)\n","import { Player } from './Player'\nimport { Room } from './Room'\nimport { randomId } from './utils'\nimport { say } from '../Interface/Text'\n\nexport class Action {\n  /**\n   * Create an action\n   * @param {Object} actionConfig the action config\n   * @param {string} actionConfig.text the action text\n   * @param {()=>void | undefined} actionConfig.isEnabled evaluated after each action for action availability, if undefined the action is not automatically enabled\n   * @param {()=>Promise<void>} actionConfig.callback to do on action click\n   */\n  constructor({ text, callback, isEnabled = () => false }) {\n    this.text = text\n    this.callback = callback\n    this.isEnabled = isEnabled\n    this.identifier = randomId()\n  }\n}\n\nexport class MoveAction extends Action {\n  /**\n   * Create a move action to change room\n   * @param {Object} actionConfig the action config\n   * @param {Player} player the player to move\n   * @param {Room} wantedRoom the room to move to\n   */\n  constructor(actionConfig, player, wantedRoom) {\n    super({\n      ...actionConfig,\n      callback: () => {\n        player.move(wantedRoom)\n        say(`${player.name} moves to ${wantedRoom.name}`)\n        return actionConfig.callback()\n      },\n    })\n  }\n}\n","const actionId = 'actions'\nconst actionsElement = document.getElementById(actionId)\nimport { Action } from '../Game/Action'\nimport { World } from '../Game/World'\n\n/**\n * Add an action to the interface\n * @param {Action} action action to register\n */\nexport const addAction = ({ text, callback, identifier }) => {\n  const actionElement = document.createElement('button')\n  Object.assign(actionElement, {\n    classList: ['action-button'],\n    onclick: callback,\n    id: identifier,\n    innerHTML: text,\n  })\n  actionsElement.append(actionElement)\n}\n\n/**\n * Add all enabled action for current state\n * @param {World} world\n */\nexport const addEnabledActions = (world) =>\n  world.actions.forEach((action) => action.isEnabled() && addAction(action))\n\n/**\n * Remove an action from the interface\n * @param {Action} action action to register\n */\nexport const removeAction = ({ identifier }) => {\n  const actionElement = document.getElementById(identifier)\n  if (actionElement) actionElement.parentNode.removeChild(actionElement)\n}\n\n/**\n * Clear all actions from the interface\n */\nexport const clearActions = () => {\n  actionsElement.innerHTML = ''\n}\n","import { Player } from './Player'\nimport { Room } from './Room'\nimport { drawRoom, drawPlayer } from '../Interface/Map'\nimport { Action, MoveAction } from './Action'\nimport { clearActions, addEnabledActions } from '../Interface/Action'\n\nexport class World {\n  /**\n   * @type {Room[]}\n   */\n  rooms = []\n\n  /**\n   * @type {Action[]}\n   */\n  actions = []\n\n  /**\n   * @type {Player | undefined}\n   */\n  player = undefined\n\n  constructor(name) {\n    this.name = name\n  }\n\n  /**\n   * @private\n   * @param {()=>Promise<void> | undefined} callback to do on action click\n   */\n  wrapCallback(callback) {\n    return () => {\n      clearActions()\n      return (callback ? callback() : Promise.resolve(null))\n        .then(() => {\n          addEnabledActions(this)\n        })\n        .catch(console.error)\n    }\n  }\n\n  /**\n   * @param {Object} roomConfiguration - this is the room configuration\n   */\n  createRoom(roomConfiguration) {\n    const room = new Room(roomConfiguration)\n    this.rooms.push(room)\n    drawRoom(room)\n    return room\n  }\n\n  /**\n   * Create an action\n   * @param {Object} actionConfig the action config\n   * @param {string} actionConfig.text the action text\n   * @param {()=>void | undefined} actionConfig.isEnabled evaluated after each action for action availability, if undefined the action is not automatically enabled\n   * @param {()=>Promise<void> | undefined} actionConfig.callback to do on action click\n   */\n  createAction(actionConfig) {\n    const action = new Action({\n      ...actionConfig,\n      world: this,\n      callback: this.wrapCallback(actionConfig.callback),\n    })\n    this.addAction(action)\n    return action\n  }\n\n  /**\n   * Create a move action\n   * @param {Object} actionConfig the action config\n   * @param {string} actionConfig.text the action text\n   * @param {()=>void | undefined} actionConfig.isEnabled evaluated after each action for action availability, if undefined the action is not automatically enabled\n   * @param {()=>Promise<void> | undefined} actionConfig.callback to do on action click\n   * @param {Room} wantedRoom the room to move to\n   */\n  createMoveAction(actionConfig, wantedRoom) {\n    const action = new MoveAction(\n      {\n        ...actionConfig,\n        world: this,\n        callback: this.wrapCallback(actionConfig.callback),\n      },\n      this.player,\n      wantedRoom\n    )\n    this.addAction(action)\n    return action\n  }\n\n  /**\n   * Add a connection between room1 and room2\n   * @param {Action} action the action\n   */\n  addAction(action) {\n    this.actions.push(action)\n  }\n\n  /**\n   * Create a new player\n   * @param {string} name the player name\n   * @returns {Player} the created player\n   */\n  createPlayer(name) {\n    if (this.rooms.length === 0) {\n      throw new Error(\n        'The world needs to have at least one room for the player to start'\n      )\n    }\n    const player = new Player(this.rooms[0], name)\n    this.player = player\n    drawPlayer(player)\n    return player\n  }\n}\n","import { World } from './Game/World'\nimport { say } from './Interface/Text'\nimport { addAction } from './Interface/Action'\n\nconst main = () => {\n  const world = new World('World')\n\n  const room1 = world.createRoom({ name: 'room 1', height: 2 })\n  const room2 = world.createRoom({ name: 'room 2', xPos: 1 })\n  const room3 = world.createRoom({\n    name: 'room 3',\n    xPos: 1,\n    yPos: 1,\n    color: 'black',\n  })\n\n  const player = world.createPlayer('John Doe')\n\n  world.createMoveAction(\n    {\n      text: 'Move to room 1',\n      isEnabled: () => player.currentRoom === room2,\n    },\n    room1\n  )\n\n  world.createMoveAction(\n    {\n      text: 'Move to room 3',\n      callback: () =>\n        new Promise((resolve) => {\n          setTimeout(() => {\n            say(`${player.name} found the exit 🎉`)\n          }, 1200)\n          resolve()\n        }),\n      isEnabled: () => player.currentRoom === room2 && room3.color !== 'black',\n    },\n    room3\n  )\n\n  world.createAction({\n    text: 'Search the room with care',\n    callback: () =>\n      new Promise((resolve) => {\n        say(`${player.name} searches the room ...`)\n        setTimeout(() => {\n          say(`${player.name} found a little trap door to another room`)\n          room3.updateColor()\n          resolve()\n        }, 3000)\n      }),\n    isEnabled: () => player.currentRoom === room2 && room3.color === 'black',\n  })\n\n  setTimeout(() => {\n    say(`${player.name} wakes up.`)\n    addAction(\n      world.createMoveAction(\n        {\n          text: 'Move to room 2',\n          isEnabled: () => player.currentRoom === room1,\n          world,\n        },\n        room2\n      )\n    )\n  }, 1200)\n}\n\nvoid main()\n"]}